extends ../layout.jade

block menu
  +navbar('introduction')

block title
  title BEM — Introduction

block head
  link(rel="stylesheet" href="/introduction.css")

  +og('image', 'http://getbem.com/img/bem_black.png')
  +og('url', 'http://getbem.com/introduction/')
  +og('title', 'BEM — Introduction')
  +og('description', 'BEM is a highly useful, powerful and simple naming convention to make your front-end code easier to read and understand, easier to work with, easier to scale, more robust and explicit and a lot more strict.')

block scripts
  script(src="/index.js")

block content

  .grid.grid_fixed
    .grid__row
      .grid__cell-md.grid__cell-md_size_9
        .grid(style="padding-left: 0")
          .grid__row
            .grid__cell-sm.grid__cell-sm_size_12
              +heading('Introduction', 'introduction')

              :markdown
                On smaller brochure sites, how your organize your styles isn’t usually a big concern. You get in there, write some CSS, or maybe even some SASS. You compile it all into a single stylesheet with SASS’s production settings, and then you aggregate it to get all the stylesheets from modules into a nice tidy package.

                However, when it comes to larger, more complex projects, how you organize your code is a key to efficiency. Not only in how how much time it takes, but also in how much code you write, and how much a browser has to load. This is especially important when you’re working with a team of themers, and when performance is important.

                This also true for long-term projects with legacy code — "[How to Scale and Maintain Legacy CSS with Sass and SMACSS](http://webuild.envato.com/blog/how-to-scale-and-maintain-legacy-css-with-sass-and-smacss/)".

          .grid__row
            .grid__cell-xs_size_12.raw-text
              :markdown
                ## What does BEM solves?
                
                Chaos (Greek χάος) — the formless or void state preceding the creation of your project. CSS can be wonderfully simple and easy to get started with. And even easier to mess up on the long run.
                
                Legacy CSS without proper structure can be a royal pain. 
                
                When project scale, CSS often does not.
                
                CSS code is easy to append, overwrite or reinvent. That can turn in to a mess. It is a bit like growing a new haircut every month, but only trimming a pice of it.
                
                BEM gives a default approach for new projects:
                
                 * Thinking in Blocks, Elements and Modifiers helps you figure out what your design is made of.
                 * BEM helps you getting started coding a little bit quicker through a standart syntax.
                 * BEM is about communicating between technologies and the people using them.

          .grid__row
            .grid__cell-sm.grid__cell-sm_size_12.raw-text
              :markdown
                ## Methodologies

                There are plenty of [methodologies](https://github.com/ikkou/awesome-css#architecture) out there which aimed on reducing CSS codebase and organizing programmers cooperation and maintaining of CSS code. This is obvious in large projects like Twitter, Facebook and [Github](http://markdotto.com/2014/07/23/githubs-css/#two-bundles), but other projects often grows into same “Huge CSS file” state pretty quickly.
            .grid__cell-sm.grid__cell-sm_size_3.methodology.raw-text
              :markdown
                #### [OOCSS](https://oocss.org/)
                Separating container and content with CSS “objects”

            .grid__cell-sm.grid__cell-sm_size_3.methodology.raw-text
              :markdown
                #### [SMACSS](https://smacss.com/)
                Style-guide to write your CSS with five categories for CSS rules

            .grid__cell-sm.grid__cell-sm_size_3.methodology.raw-text
              :markdown
                #### [SUITCSS](http://suitcss.github.io/)
                Structured class names and meaningful hyphens

            .grid__cell-sm.grid__cell-sm_size_3.methodology.methodology_last.raw-text
              :markdown
                #### [Atomic CSS](https://github.com/nemophrost/atomic-css)
                Breaking down styles into atomic, or indivisible, pieces

          .grid__row
            .grid__cell-xs_size_12.raw-text
              :markdown
                > We are looking for authors to write proper "[Comparison of methodologies](https://github.com/getbem/getbem.com/issues/11)"

          .grid__row
            .grid__cell-xs_size_12.raw-text
              :markdown
                No matter what methodology you choose to use in your projects, you will get advantages of structured CSS and UI. Some of them are less strict and more flexible, other is easier to understand and adapt in team. 
                
                In fact BEM is similar to some of them. For example OOCSS is about keeping CSS modular, so it can be reused and extended. This is similar to the Block, Elemetn and Modifier approach. SMACSS has five types of CSS categories: Base, Layout, Module, State and Theme. The Module and State categories are similar analouge for the Block, Element and Modifier approach.

          .grid__row
            .grid__cell-sm.grid__cell-sm_size_12
              blockquote.blockquote
                p The reason I choose BEM over other methodologies comes down to this: it's less confusing than the other methods (i.e. SMACSS) but still provides us the good architecture we want (i.e. OOCSS) and with a recognisable terminology.
                footer
                  | Mark McDonnell, 
                  a(href="http://www.integralist.co.uk/posts/maintainable-css-with-bem/#why-bem-over-the-others") Maintainable CSS with BEM
          
          .grid__row
            .grid__cell-sm.grid__cell-sm_size_12.raw-text
              :markdown
                ## Blocks, Elements and Modifiers

                You will not be surprised, that BEM is abbreviation of the key elements of the methodology — Block, Element and Modifier. Strict rules of naming can be found in [Naming](/naming) article.

          .grid__row
            .grid__cell-lg_size_4.grid__cell_left-border
              .heading.heading_level_1.heading_block Block
              .raw-text
                :markdown
                  Standalone entity that is meaningful on its own.

                  __Examples__

                  `header`, `container`, `menu`, `checkbox`, `input`

            .grid__cell-lg_size_4.grid__cell_left-border
              .heading.heading_level_1.heading_element Element
              .raw-text
                :markdown
                  Parts of a block and have no standalone meaning. They are semantically tied to its block.

                  __Examples__

                  `menu item`, `list item`, `checkbox caption`, `header title`
            .grid__cell-lg_size_4.grid__cell_left-border
              .heading.heading_level_1.heading_modifier Modifier
              .raw-text
                :markdown
                  Flags on blocks or elements. Use them to change appearance or behavior.

                  __Examples__

                  `disabled`, `highlighted`, `checked`, `fixed`, `size big`, `color yellow`

          .grid__row
            .grid__cell-sm.grid__cell-sm_size_12.text_align_center
              img.github(src="/img/github_captions.jpg")

          .grid__row
            .grid__cell-sm.grid__cell-sm_size_12.raw-text
              :markdown
                ## Under the hood

                Lets look how one particular element on page can be implemented in BEM. We will take `button` from [GitHub styleguide](https://github.com/styleguide/css/1.0):

              p(style="text-align: center; padding: 30px 0;")
                img(src="/img/github_buttons.jpg")

              :markdown
                We can have normal button for usual cases, and two more states for different ones. Because of BEM style blocks by class selectors, we can implement blocks with any tags we want (`button`, `a` or even `div`). Naming invites us to use `block__modifier_value` syntax.
          .grid__row
            .grid__cell-sm.grid__cell-sm_size_6.raw-text
              h5 HTML
              :markdown
                ```html
                <button class="button">
                  Normal button
                </button>

                <button class="button button_state_success">
                  Success button
                </button>

                <button class="button button_state_danger">
                  Danger button
                </button>
                ```

            .grid__cell-sm.grid__cell-sm_size_6.raw-text
              h5 CSS
              :markdown
                ```css
                .button {
                  display: inline-block;
                  border-radius: 3px;
                  padding: 7px 12px;
                  border: 1px solid #D5D5D5;
                  background-image: linear-gradient(#EEE, #DDD);
                  font: 700 13px/18px Helvetica, arial;
                }

                .button_state_success {
                  color: #FFF;
                  background: #569E3D linear-gradient(#79D858, #569E3D) repeat-x;
                  border-color: #4A993E;
                }

                .button_state_danger {
                  color: #900;
                }
                ```

          .grid__row
            .grid__cell-sm.grid__cell-sm_size_12.raw-text
              :markdown
                ### Further Reading

                For more examples of building BEM blocks you can read "[Building My Health Skills — Part 3](http://www.bluegg.co.uk/building-my-health-skills-part-3/)" by Hamish Taplin.

          .grid__row
            .grid__cell-sm.grid__cell-sm_size_12.raw-text
              :markdown
                ## Benefits
                
                [The benefits of BEM CSS](http://www.slideshare.net/BobDonderwinkel/bem-presentation-40907446) by [Bob Donderwinkel](https://twitter.com/bobdonderwinkel).
                
          .grid__row
            .grid__cell-sm.grid__cell-sm_size_4.raw-text
              :markdown
                ### Perfomance
                Single CSS classname perks gives you a better performace: Rendering engines evaluate CSS selectors right to left - the less they have to evaluate, the faster it renders.
                
                You can look at [Github's CSS performace](https://speakerdeck.com/jonrohan/githubs-css-performance) for numbers and concrete tips.
            .grid__cell-sm.grid__cell-sm_size_4.raw-text
              :markdown
                ### CSS specificty
                
                Complex CSS selectors get a higher importance. You have to match up to this selector or use `!important` to override it.
                
                Or find the actual CSS you want to change. But the bigger the CSS code base, the nastier that can get.
                
                Using singe CSS classnames makes it easier to rework your existing CSS code base.
            .grid__cell-sm.grid__cell-sm_size_4.raw-text
              :markdown
                ### Better decoupling
                
                Using HTML elements names in your CSS selectors forces you to update both when only one chnages.
                
                Using just single CSS BEM classnames makes them more portable to another HTML structure.
          .grid__row
            .grid__cell-sm.grid__cell-sm_size_4.raw-text
              :markdown
                ### Modularity

                Blocks styles should not have dependencies on other elements on a page, therefore you will never get [problems from cascading](http://www.phase2technology.com/blog/used-and-abused-css-inheritance-and-our-misuse-of-the-cascade/).

                This also gives you ability to transfer blocks from ready project to new one.
            .grid__cell-sm.grid__cell-sm_size_4.raw-text
              :markdown
                ### Reusablility

                Copmosing independent blocks in a different way and reusing them reduces amout of CSS code, that you will maintain.

                If you have design guidelines, then it is super effective to have ready Blocks library.
            .grid__cell-sm.grid__cell-sm_size_4.raw-text
              :markdown
                ### Structure

                BEM methodology gives you simple and understandable structure in your CSS code.

                We wrote [Building](/building/) article, that contains straightforward way of storing this structure on file system and a way to build it.

          .grid__row
            .grid__cell-sm.grid__cell-sm_size_12.raw-text
              :markdown
                ## Case study

                We are looking forward to writing "How to migrate existing project to BEM". In meanwhile you can watch nice presentation by Nicole Sullivan — "[CSS preprocessor performance](http://www.youtube.com/watch?v=0NDyopLKE1w)". It gives a very good explanation of problems, that she meets in major of sites and ways to track and handle them.
      .grid__cell-md.grid__cell-md_size_3
        .affix__menu.hidden-xs.hidden-sm(data-spy="affix" data-offset-top="50" data-offset-bottom="200")
          ul.nav.nav_pills.nav_stacked
            - var headings = [];
            - headings.push('Introduction');
            - headings.push('What does BEM solves?');
            - headings.push('Methodologies');
            - headings.push('Blocks, Elements and Modifiers');
            - headings.push('Under the hood');
            - headings.push('Benefits');

            each heading, index in headings
              - var hash = heading.toLowerCase().replace(/,|\./g, '').replace(/\?|\!|\ /g, '-');
              li.nav__item(class= index === 0 ? 'nav__item_active' : '')
                a.nav__link(href="##{hash}") #{heading}
